// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// calcMinOverlap
int calcMinOverlap(std::string seq, int meanWidth);
RcppExport SEXP _RealReadSim_calcMinOverlap(SEXP seqSEXP, SEXP meanWidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< int >::type meanWidth(meanWidthSEXP);
    rcpp_result_gen = Rcpp::wrap(calcMinOverlap(seq, meanWidth));
    return rcpp_result_gen;
END_RCPP
}
// getCoverage
std::vector<int> getCoverage(std::vector<int>& pos, std::vector<int>& width, int length);
RcppExport SEXP _RealReadSim_getCoverage(SEXP posSEXP, SEXP widthSEXP, SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type pos(posSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(getCoverage(pos, width, length));
    return rcpp_result_gen;
END_RCPP
}
// evalCoverage
List evalCoverage(std::vector<int>& pos, std::vector<int>& width, int length, int minOverlap, int minContigLength);
RcppExport SEXP _RealReadSim_evalCoverage(SEXP posSEXP, SEXP widthSEXP, SEXP lengthSEXP, SEXP minOverlapSEXP, SEXP minContigLengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type pos(posSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< int >::type minOverlap(minOverlapSEXP);
    Rcpp::traits::input_parameter< int >::type minContigLength(minContigLengthSEXP);
    rcpp_result_gen = Rcpp::wrap(evalCoverage(pos, width, length, minOverlap, minContigLength));
    return rcpp_result_gen;
END_RCPP
}
// getIdenticalSeqs
List getIdenticalSeqs(std::vector<int>& starts1, std::vector<int>& ends1, std::vector<int>& starts2, std::vector<int>& ends2, int minL);
RcppExport SEXP _RealReadSim_getIdenticalSeqs(SEXP starts1SEXP, SEXP ends1SEXP, SEXP starts2SEXP, SEXP ends2SEXP, SEXP minLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type starts1(starts1SEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type ends1(ends1SEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type starts2(starts2SEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type ends2(ends2SEXP);
    Rcpp::traits::input_parameter< int >::type minL(minLSEXP);
    rcpp_result_gen = Rcpp::wrap(getIdenticalSeqs(starts1, ends1, starts2, ends2, minL));
    return rcpp_result_gen;
END_RCPP
}
// sequenceToFastaReads
bool sequenceToFastaReads(std::vector<int>& starts, std::string& sequence, int meanWidth, std::string& newFasta, std::string& nameTag);
RcppExport SEXP _RealReadSim_sequenceToFastaReads(SEXP startsSEXP, SEXP sequenceSEXP, SEXP meanWidthSEXP, SEXP newFastaSEXP, SEXP nameTagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type starts(startsSEXP);
    Rcpp::traits::input_parameter< std::string& >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< int >::type meanWidth(meanWidthSEXP);
    Rcpp::traits::input_parameter< std::string& >::type newFasta(newFastaSEXP);
    Rcpp::traits::input_parameter< std::string& >::type nameTag(nameTagSEXP);
    rcpp_result_gen = Rcpp::wrap(sequenceToFastaReads(starts, sequence, meanWidth, newFasta, nameTag));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RealReadSim_calcMinOverlap", (DL_FUNC) &_RealReadSim_calcMinOverlap, 2},
    {"_RealReadSim_getCoverage", (DL_FUNC) &_RealReadSim_getCoverage, 3},
    {"_RealReadSim_evalCoverage", (DL_FUNC) &_RealReadSim_evalCoverage, 5},
    {"_RealReadSim_getIdenticalSeqs", (DL_FUNC) &_RealReadSim_getIdenticalSeqs, 5},
    {"_RealReadSim_sequenceToFastaReads", (DL_FUNC) &_RealReadSim_sequenceToFastaReads, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_RealReadSim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
