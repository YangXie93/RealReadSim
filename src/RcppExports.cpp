// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// translateOverlap
std::vector<int> translateOverlap(int c1s, int c1e, int c2s, int c2e, int as1, int ae1, int as2, int ae2);
RcppExport SEXP _RealReadSim_translateOverlap(SEXP c1sSEXP, SEXP c1eSEXP, SEXP c2sSEXP, SEXP c2eSEXP, SEXP as1SEXP, SEXP ae1SEXP, SEXP as2SEXP, SEXP ae2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type c1s(c1sSEXP);
    Rcpp::traits::input_parameter< int >::type c1e(c1eSEXP);
    Rcpp::traits::input_parameter< int >::type c2s(c2sSEXP);
    Rcpp::traits::input_parameter< int >::type c2e(c2eSEXP);
    Rcpp::traits::input_parameter< int >::type as1(as1SEXP);
    Rcpp::traits::input_parameter< int >::type ae1(ae1SEXP);
    Rcpp::traits::input_parameter< int >::type as2(as2SEXP);
    Rcpp::traits::input_parameter< int >::type ae2(ae2SEXP);
    rcpp_result_gen = Rcpp::wrap(translateOverlap(c1s, c1e, c2s, c2e, as1, ae1, as2, ae2));
    return rcpp_result_gen;
END_RCPP
}
// hasOverlap
bool hasOverlap(int c1s, int c1e, int c2s, int c2e, int a1s, int a1e, int a2s, int a2e);
RcppExport SEXP _RealReadSim_hasOverlap(SEXP c1sSEXP, SEXP c1eSEXP, SEXP c2sSEXP, SEXP c2eSEXP, SEXP a1sSEXP, SEXP a1eSEXP, SEXP a2sSEXP, SEXP a2eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type c1s(c1sSEXP);
    Rcpp::traits::input_parameter< int >::type c1e(c1eSEXP);
    Rcpp::traits::input_parameter< int >::type c2s(c2sSEXP);
    Rcpp::traits::input_parameter< int >::type c2e(c2eSEXP);
    Rcpp::traits::input_parameter< int >::type a1s(a1sSEXP);
    Rcpp::traits::input_parameter< int >::type a1e(a1eSEXP);
    Rcpp::traits::input_parameter< int >::type a2s(a2sSEXP);
    Rcpp::traits::input_parameter< int >::type a2e(a2eSEXP);
    rcpp_result_gen = Rcpp::wrap(hasOverlap(c1s, c1e, c2s, c2e, a1s, a1e, a2s, a2e));
    return rcpp_result_gen;
END_RCPP
}
// mkChimeras
List mkChimeras(std::vector<int>& starts1, std::vector<int>& ends1, std::list<std::vector<int> >& covs1, std::vector<int>& starts2, std::vector<int>& ends2, std::list<std::vector<int> >& covs2, std::vector<int>& aStarts1, std::vector<int>& aEnds1, std::vector<int>& aStarts2, std::vector<int>& aEnds2, std::list<std::string>& seqs1, std::list<std::string>& seqs2, std::vector<std::string>& name1, std::vector<std::string>& name2, std::list<std::vector<int> >& readNrVecs1, std::list<std::vector<int> >& readNrVecs2, double minimalDistance);
RcppExport SEXP _RealReadSim_mkChimeras(SEXP starts1SEXP, SEXP ends1SEXP, SEXP covs1SEXP, SEXP starts2SEXP, SEXP ends2SEXP, SEXP covs2SEXP, SEXP aStarts1SEXP, SEXP aEnds1SEXP, SEXP aStarts2SEXP, SEXP aEnds2SEXP, SEXP seqs1SEXP, SEXP seqs2SEXP, SEXP name1SEXP, SEXP name2SEXP, SEXP readNrVecs1SEXP, SEXP readNrVecs2SEXP, SEXP minimalDistanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type starts1(starts1SEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type ends1(ends1SEXP);
    Rcpp::traits::input_parameter< std::list<std::vector<int> >& >::type covs1(covs1SEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type starts2(starts2SEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type ends2(ends2SEXP);
    Rcpp::traits::input_parameter< std::list<std::vector<int> >& >::type covs2(covs2SEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type aStarts1(aStarts1SEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type aEnds1(aEnds1SEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type aStarts2(aStarts2SEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type aEnds2(aEnds2SEXP);
    Rcpp::traits::input_parameter< std::list<std::string>& >::type seqs1(seqs1SEXP);
    Rcpp::traits::input_parameter< std::list<std::string>& >::type seqs2(seqs2SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type name1(name1SEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type name2(name2SEXP);
    Rcpp::traits::input_parameter< std::list<std::vector<int> >& >::type readNrVecs1(readNrVecs1SEXP);
    Rcpp::traits::input_parameter< std::list<std::vector<int> >& >::type readNrVecs2(readNrVecs2SEXP);
    Rcpp::traits::input_parameter< double >::type minimalDistance(minimalDistanceSEXP);
    rcpp_result_gen = Rcpp::wrap(mkChimeras(starts1, ends1, covs1, starts2, ends2, covs2, aStarts1, aEnds1, aStarts2, aEnds2, seqs1, seqs2, name1, name2, readNrVecs1, readNrVecs2, minimalDistance));
    return rcpp_result_gen;
END_RCPP
}
// evalCoverage
List evalCoverage(std::vector<int>& pos, std::vector<int>& width, std::vector<int>& sampleID, int length, int minOverlap, int minContigLength, int nrOfSamples);
RcppExport SEXP _RealReadSim_evalCoverage(SEXP posSEXP, SEXP widthSEXP, SEXP sampleIDSEXP, SEXP lengthSEXP, SEXP minOverlapSEXP, SEXP minContigLengthSEXP, SEXP nrOfSamplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type pos(posSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type width(widthSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type sampleID(sampleIDSEXP);
    Rcpp::traits::input_parameter< int >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< int >::type minOverlap(minOverlapSEXP);
    Rcpp::traits::input_parameter< int >::type minContigLength(minContigLengthSEXP);
    Rcpp::traits::input_parameter< int >::type nrOfSamples(nrOfSamplesSEXP);
    rcpp_result_gen = Rcpp::wrap(evalCoverage(pos, width, sampleID, length, minOverlap, minContigLength, nrOfSamples));
    return rcpp_result_gen;
END_RCPP
}
// getIdenticalSeqs
List getIdenticalSeqs(std::vector<int>& starts1, std::vector<int>& ends1, std::vector<int>& starts2, std::vector<int>& ends2, int minL);
RcppExport SEXP _RealReadSim_getIdenticalSeqs(SEXP starts1SEXP, SEXP ends1SEXP, SEXP starts2SEXP, SEXP ends2SEXP, SEXP minLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type starts1(starts1SEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type ends1(ends1SEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type starts2(starts2SEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type ends2(ends2SEXP);
    Rcpp::traits::input_parameter< int >::type minL(minLSEXP);
    rcpp_result_gen = Rcpp::wrap(getIdenticalSeqs(starts1, ends1, starts2, ends2, minL));
    return rcpp_result_gen;
END_RCPP
}
// sequenceToFastaReads
bool sequenceToFastaReads(std::vector<int>& starts, std::string& sequence, int meanWidth, std::string& newFasta, std::string& nameTag);
RcppExport SEXP _RealReadSim_sequenceToFastaReads(SEXP startsSEXP, SEXP sequenceSEXP, SEXP meanWidthSEXP, SEXP newFastaSEXP, SEXP nameTagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type starts(startsSEXP);
    Rcpp::traits::input_parameter< std::string& >::type sequence(sequenceSEXP);
    Rcpp::traits::input_parameter< int >::type meanWidth(meanWidthSEXP);
    Rcpp::traits::input_parameter< std::string& >::type newFasta(newFastaSEXP);
    Rcpp::traits::input_parameter< std::string& >::type nameTag(nameTagSEXP);
    rcpp_result_gen = Rcpp::wrap(sequenceToFastaReads(starts, sequence, meanWidth, newFasta, nameTag));
    return rcpp_result_gen;
END_RCPP
}
// calcMinOverlap
int calcMinOverlap(std::string seq, int meanWidth);
RcppExport SEXP _RealReadSim_calcMinOverlap(SEXP seqSEXP, SEXP meanWidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< int >::type meanWidth(meanWidthSEXP);
    rcpp_result_gen = Rcpp::wrap(calcMinOverlap(seq, meanWidth));
    return rcpp_result_gen;
END_RCPP
}
// subSeqs
std::vector<std::string> subSeqs(std::string seq, std::vector<int> starts, std::vector<int> ends);
RcppExport SEXP _RealReadSim_subSeqs(SEXP seqSEXP, SEXP startsSEXP, SEXP endsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type starts(startsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type ends(endsSEXP);
    rcpp_result_gen = Rcpp::wrap(subSeqs(seq, starts, ends));
    return rcpp_result_gen;
END_RCPP
}
// calcCovVec
Rcpp::List calcCovVec(std::list<std::vector<int> > readsPerSample, std::vector<int> lengths);
RcppExport SEXP _RealReadSim_calcCovVec(SEXP readsPerSampleSEXP, SEXP lengthsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::list<std::vector<int> > >::type readsPerSample(readsPerSampleSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type lengths(lengthsSEXP);
    rcpp_result_gen = Rcpp::wrap(calcCovVec(readsPerSample, lengths));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RealReadSim_translateOverlap", (DL_FUNC) &_RealReadSim_translateOverlap, 8},
    {"_RealReadSim_hasOverlap", (DL_FUNC) &_RealReadSim_hasOverlap, 8},
    {"_RealReadSim_mkChimeras", (DL_FUNC) &_RealReadSim_mkChimeras, 17},
    {"_RealReadSim_evalCoverage", (DL_FUNC) &_RealReadSim_evalCoverage, 7},
    {"_RealReadSim_getIdenticalSeqs", (DL_FUNC) &_RealReadSim_getIdenticalSeqs, 5},
    {"_RealReadSim_sequenceToFastaReads", (DL_FUNC) &_RealReadSim_sequenceToFastaReads, 5},
    {"_RealReadSim_calcMinOverlap", (DL_FUNC) &_RealReadSim_calcMinOverlap, 2},
    {"_RealReadSim_subSeqs", (DL_FUNC) &_RealReadSim_subSeqs, 3},
    {"_RealReadSim_calcCovVec", (DL_FUNC) &_RealReadSim_calcCovVec, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_RealReadSim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
